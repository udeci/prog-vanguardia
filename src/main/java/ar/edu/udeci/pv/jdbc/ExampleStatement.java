package ar.edu.udeci.pv.jdbc;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import ar.edu.udeci.pv.jdbc.model.ElectronicAuditDetail;


/**
 * The Class Manager.
 */
public class ExampleStatement{
	
	/** The connection. */
	private static Connection connection;
	
	/** The sql insert. */
	private String sqlInsert = "INSERT INTO electronicAudit "
			+ "(dateAudi, terminalId, transactionNumber, userId, details,auditType,auditCode,auditProcess,auditSubProcess,stackTrace) VALUES (?,?,?,?,?,?,?,?,?,?)";
	
	/** The sql get all element. */
	private String sqlGetAllElement = "SELECT * FROM electronicAudit";
	
	public static void main(String[] argv) {
		try {
			createConnection("test_db");
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
	}
	/**
	 * Creates the connection.
	 *
	 * @param fileName the file name
	 * @throws ClassNotFoundException the class not found exception
	 * @throws SQLException the SQL exception
	 */
	public static void createConnection(String fileName) throws ClassNotFoundException, SQLException{
		Class.forName("org.hsqldb.jdbcDriver");
		connection = DriverManager.getConnection("jdbc:hsqldb:file:"+fileName);
		try {  
            Statement st  = connection.createStatement();
            String table = "CREATE TABLE electronicAudit("+
    				"idError int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,"+
    				"dateAudi Timestamp NULL ,"+
    				"terminalId varchar(10) NOT NULL,"+
    				"transactionNumber int NULL,"+
    				"userId varchar(50) NULL,"+
    				"details LONGVARCHAR NULL,"+
    				"auditType varchar(50) NULL,"+
    				"auditCode varchar(50) NULL,"+
    				"auditProcess varchar(50) NULL,"+
    				"auditSubProcess varchar(50) NULL,"+
    				"stackTrace LONGVARCHAR NULL"+
    			")";
            st.execute(table);
        } catch (Exception ex){  
        }
	}
	
	/**
	 * Adds the electronic audit.
	 *
	 * @param electronicAuditDetail the electronic audit detail
	 * @throws SQLException the SQL exception
	 */
	public void addElectronicAudit(ElectronicAuditDetail electronicAuditDetail ) throws SQLException{
		PreparedStatement statement = connection.prepareStatement(sqlInsert);
		statement.setTimestamp(1, new Timestamp(electronicAuditDetail.getTimestamp().getTime()));
		statement.setString(2, electronicAuditDetail.getTerminalId());
		statement.setInt(3, electronicAuditDetail.getTransactionId() == null ? 0 : new Integer(electronicAuditDetail.getTransactionId()).intValue());
		statement.setString(4, electronicAuditDetail.getUserId());
		statement.setString(5, electronicAuditDetail.getDetailed());
		statement.setString(6, electronicAuditDetail.getDescription());
		statement.setString(7, electronicAuditDetail.getCode());
		statement.setString(8, electronicAuditDetail.getProcess());
		statement.setString(9, electronicAuditDetail.getSubProcess());
		statement.setString(10, electronicAuditDetail.getStackTrace());
		statement.execute();
		statement.close();
	}
	
	/**
	 * Gets the all elements.
	 *
	 * @return the all elements
	 * @throws SQLException the SQL exception
	 */
	public List getAllElements() throws SQLException{
		ResultSet resultSet = null;
		List listElectronicJournal = null;
		Statement statement = connection.createStatement();
		resultSet = statement.executeQuery(sqlGetAllElement);
		listElectronicJournal = this.mappingAudit(resultSet);
		resultSet.close();
		return listElectronicJournal;
	}
	
	/**
	 * Mapping audit.
	 *
	 * @param resultSet the result set
	 * @return the list
	 * @throws SQLException the SQL exception
	 */
	private List mappingAudit(ResultSet resultSet) throws SQLException{
		List listElectronicJournal = new ArrayList();
		while (resultSet != null && resultSet.next()){
			
			ElectronicAuditDetail electronicAuditDetail = new ElectronicAuditDetail(
					resultSet.getString("terminalId"),
					resultSet.getString("userId"),
					resultSet.getString("details"),


					resultSet.getString("auditType"),
					new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(resultSet.getTimestamp("dateAudi")),

					resultSet.getString("transactionNumber"),
					resultSet.getString("auditCode"),
					resultSet.getString("auditProcess"), 
					resultSet.getString("auditSubProcess"), 
					resultSet.getString("stackTrace"));
			listElectronicJournal.add(electronicAuditDetail);
        }
		
		return listElectronicJournal;
	}
	
	/**
	 * Delete all elements.
	 *
	 * @throws SQLException the SQL exception
	 */
	public void deleteAllElements() throws SQLException{
		Statement statement = connection.createStatement();  
		statement.executeUpdate("DELETE FROM electronicAudit");
		statement.close();
	}
	
	/**
	 * Close connection.
	 *
	 */
	public void closeConnection() {
		if (connection != null) {
			Statement statement;
			try {
				statement = connection.createStatement();
				statement.executeUpdate("SHUTDOWN");
				statement.close();
				connection.close();				
			} catch (SQLException e) {
				throw new RuntimeException(e);
			}

		}
	}

}
